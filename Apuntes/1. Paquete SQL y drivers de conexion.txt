-- 1.1 Bienvenido al curso --
PostGre y SQL

-- 1.2 Drivers de bases de datos --
Package database
Este usa un paquete extra llamado driver 
Lista de algunos drivers como apache, Firebird, Oracle, SQl, PostGres.
Se utilizan interfaces, structuras y funciones.
Para importar el paquete de SQl
    import (
        "database/sql"
        _"github.com/lib/pq
    )
El guion bajo dice importame este paquete para efectos secundarios (_), de forma que nos bloquea para nosotros no hacer uso de los paquetes de esa importacion.
Para evitarnos hacernos bolas con los métodos exportados.


-- 1.3 Conectarse a una base de datos --
Para hacerlo importamos lo mismo que arriba: 
    import (
        "database/sql"
        _"github.com/lib/pq
    )                                           //Por ejemplo PostGres
Para abrir la conexión con el metodo [sql.Open("El nombre del driver"),"Luego la cadena de conexión"]
ejemplo:
    //Puntero de la estructura db, un error para ver si los argumentos son correctos.
    db, err := sql.Open("DriverName", "dataSourceName")
    if err != nil {
        panic err
    }
    defer db.Close() //Cerrar la conexión de la base de datos.
Usando el metodo [db.Ping] para revisar si la conexión fue exitosa, si no lo es mandara un error.
if err := db.Ping(); err != nil {
    panic(err)
}

-- 1.4 Manipular datos --
SQL Commands
Query()| QueryContext()| QueryRow()
- Select
QueryContext -> Recibe un contexto
QuerRow -> Una unica fila.
Exec()| ExcContext()
- INSERT
- UPDATE
- DELETE
- CREATE
- DROP
- ALTER

    Procesando datos
    Exec()
    Result
    //Marcador de posición $,de manera que tenemos que poner el valor aun lado.
    res, err := db.Exec("Insert INTO products(name) VALUES ($1)","Curso Go")
    if err != nil {
        log.Fatal(err)
    } 
    //Retornamos el id del usuario por si hay algun problma
    id,err := res.LastInsertId()
    if err != nil {
        log.Fatal(err)
    }

    rowsCount, err := res.RowsAffected()
    if err != nil {
        log.Fatal(err)
    }

    fmt.Prinf("LastInsertId %d, RowsAffected %d\n",id,rowsCount)


-- 1.5 Obtener un conjunto de datos --
Obteniendo Datos - Rows
    rows, err := db.Query("Select id, name From products")
    if err != nil { ... }
    defer rows.Close() //si no lo llamos la conexion quedara activa y sera facil de cometer errores.

    //For para iterar las filas.
    for rows.next(){
        var id uint
        var name string //Scan para leer las columnas [campos]
        if err := rows.Scan(&id, &name); err != nil{
            ...
        }
        fmt.Println(id,name)
    }
    //Revisar si se ha tenido un error al momento de iterar
    if err := rows.Err(); err != nil { ... }


-- BAD _,err :=db.Query("DELETE FROM products")
Siempre va a devolver row cuando este abierto, por lo que si no devuelves el row la conexion no se va a cerrar.
-- GOOD _,err := db.Exec("DELETE FROM products")
Cuando no vamos a usar filas se recomienda usar este.


-- 1.6 Obtener una única fila --
[QueryRow] para una unica fila.

    product := product{}
    err := db.QuerRow("Select id,name From prodyct where id = $1",6).Scan(
        &product.ID,
        &product.Name,
    )
    //Cuando haya un error
    switch(
        case err == sql.ErrNoRows:
            log.Print("No hay un producto con este id")
        case err != nil:
            log.Fatal(err)
        default:
            Log.Print("Producto -> ID: %d, Name: %s", product.ID, product.Name)
    )

-- 1.7 Declaraciones Preparadas --
Permite decirle a la base de datos que cree la instrucción, para que este preparada para recibir los argumentos.
[Prepare()]
struct statement
    stmt, err := db.Prepare("Insert into products(name,location)Values ($1,$2)")
    if err != nil {...}

    res, err := stmt.Exec("Curso Go","Popayan")
    if err != nil {...}

    id, err := res.LastInsertId()
    if err != nil {...}

    rowsAff,err := res.RowsAffected()
    if err != nil {...}

    res1, err := stmt.Exec("Curso db con Go", "Cali")
res2, err := stmt.Exec("Curso testing con Go", "Bogota")

-- 1.8 Transacciones --
Hacer lo mismo en las bases de datos
    tx, err := db.Begin()
    if err != nil {...}

    stmtInvoice, err := tx.Prepare("Insert into invoices(client) VALUES(?)")
    if err != nil { tx.Rollback()}
    defer stmtInvoice.Close() //La cerramos

    invRes, err := stmtInvoice.Exec("Juan")
    if err != nil {tx.Rollback()}

    invID, err := invRes.LastInsertId()
    if err != nil {tx.Rollback}

    //DETALLE DE LA FACTURA
    stmtItem, err := tx.Prepare("Insert into invoice_items(invoice_id,product,price) VALUES (?,?,?))
    if err != nil { tx.Rollback()}
    defer stmtItem.Close()
    //[_] identificador blank para evitarlo.
    _,err = stmtItem.Exec(invID,"Curso Go", 50)
    if err != nil {tx.Rollback()}

    tx.commit()

-- 1.9 Datos Nulos --
Tiene un manejo especial por el valor 0 que tienen los datos.
Estructuras intermedias
[Campos Nulos scanner/valuer]
    type Product struct{ Name string}
    for rows.Next(){
        var nameNull sql.NullString
        p := product{}
        err := rows.Scan(&nameNull)
        //nameNull.String contiene un valor si nameNull.Valid es verdadero
        if NameNull.Valid{
            p.Name = nameNull.String
        }
    }
- Campos Punteros
    type Product struct { Name string}
    for rows.Next(){
        var name *string
        p := Product{}
        err := rows.Scan(&name)
        
        //name contiene un valor si name es diferente de null 
        if name != nil {
            p.Name *name
        }
    }
